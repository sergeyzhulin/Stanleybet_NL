package lt.appcamp.stanleybet.dbms;

import lt.appcamp.stanleybet.dbms.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LEAGUE.
 */
public class League {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String be_id;
    private Boolean isHot;
    private long leagueId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LeagueDao myDao;

    private League league;
    private Long league__resolvedKey;


    public League() {
    }

    public League(Long id) {
        this.id = id;
    }

    public League(Long id, String name, String be_id, Boolean isHot, long leagueId) {
        this.id = id;
        this.name = name;
        this.be_id = be_id;
        this.isHot = isHot;
        this.leagueId = leagueId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLeagueDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getBe_id() {
        return be_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBe_id(String be_id) {
        this.be_id = be_id;
    }

    public Boolean getIsHot() {
        return isHot;
    }

    public void setIsHot(Boolean isHot) {
        this.isHot = isHot;
    }

    public long getLeagueId() {
        return leagueId;
    }

    public void setLeagueId(long leagueId) {
        this.leagueId = leagueId;
    }

    /** To-one relationship, resolved on first access. */
    public League getLeague() {
        long __key = this.leagueId;
        if (league__resolvedKey == null || !league__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LeagueDao targetDao = daoSession.getLeagueDao();
            League leagueNew = targetDao.load(__key);
            synchronized (this) {
                league = leagueNew;
            	league__resolvedKey = __key;
            }
        }
        return league;
    }

    public void setLeague(League league) {
        if (league == null) {
            throw new DaoException("To-one property 'leagueId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.league = league;
            leagueId = league.getId();
            league__resolvedKey = leagueId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
